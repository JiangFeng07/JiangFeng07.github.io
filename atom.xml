<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江峰的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://JiangFeng07.github.com/"/>
  <updated>2018-01-16T09:49:22.000Z</updated>
  <id>http://JiangFeng07.github.com/</id>
  
  <author>
    <name>Jiang Feng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java并发编程-volatile关键字</title>
    <link href="http://JiangFeng07.github.com/2018/01/16/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-volatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://JiangFeng07.github.com/2018/01/16/java并发编程-volatile关键字/</id>
    <published>2018-01-16T09:45:52.000Z</published>
    <updated>2018-01-16T09:49:22.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>可见性</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用volatile来修饰共享变量时，就保证了不同线程对这个变量操作的可见性，也就是说，一个线程如果修改了这个变量的值，会及时把改变后的值更新到主内存中，对其它线程来说是可见的。</p></li><li><p>有序性</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于volatile关键字能禁止指令重排序，所以保证了“一定”的有序性。</p></li><li><p>原子性</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由上可知，volatile关键字可以保证可见性和“一定”的有序性，那么volatile关键字能保证对变量操作的原子性吗？首先来看下下面的例子。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.locks.Lock;</span><br><span class="line">import java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by lionel on 18/1/12.</span><br><span class="line"> */</span><br><span class="line">public class VolatileTest &#123;</span><br><span class="line">    public volatile int inc = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Lock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    public void increase() &#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final VolatileTest volatileTest = new VolatileTest();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            new Thread() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    for (int j = 0; j &lt; 1000; j++) &#123;</span><br><span class="line">                        volatileTest.increase();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(volatileTest.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个代码执行的结果是多少了?10000（可能有人认为由于 volatile 保证了变量的可见性，每次线程执行完自加操作后别的线程都能拿到，所以10个线程分别进行了1000词操作，最终的结果是10000）？事实上是每次执行的结果都不大一样，且每次结果都小于10000。为什么会这样<br>  了？这是因为volatile关键字无法保证对变量操作的原子性造成的。由于自增操作是“复合操作”（读取变量原始值、加1操作、写入工作内存）。比方说某个时刻变量inc的值为10，线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，并没有对变量进行修改操作，所以此时主内存的值并没有改变，依然是10。而此时，线程2发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。那么两个线程分别进行了一次自增操作后，inc只增加了1。<br>  <br><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;怎样可以保证代码的原子性了，使用synchronized或者Lock。<br>  代码如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.locks.Lock;</span><br><span class="line">import java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by lionel on 18/1/12.</span><br><span class="line"> */</span><br><span class="line">public class VolatileTest &#123;</span><br><span class="line">    public volatile int inc = 0;</span><br><span class="line"></span><br><span class="line">    Lock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * volatile 无法保证对变量操作是原子性的</span><br><span class="line">     */</span><br><span class="line">    public void increase() &#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 方案一:synchronized</span><br><span class="line">     */</span><br><span class="line">    public synchronized void increase1() &#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 方案二:ReentrantLock</span><br><span class="line">     */</span><br><span class="line">    public void increase2() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            inc++;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final VolatileTest volatileTest = new VolatileTest();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            new Thread() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    for (int j = 0; j &lt; 1000; j++) &#123;</span><br><span class="line">//                        volatileTest.increase();</span><br><span class="line">                        volatileTest.increase1();//使用 synchronized</span><br><span class="line">//                        volatileTest.increase2();//使用 Lock</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(volatileTest.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;可见性&lt;/p&gt;
&lt;p&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用volatile来修饰共享变量时，就保证了不同线程对这个变量操作的可见性，也就是说，一个线程如果修改了这个变量的值，会及时把改变后的值更新到主内存中，对其
      
    
    </summary>
    
    
      <category term="java" scheme="http://JiangFeng07.github.com/tags/java/"/>
    
      <category term="并发编程" scheme="http://JiangFeng07.github.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java内存模型</title>
    <link href="http://JiangFeng07.github.com/2018/01/16/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://JiangFeng07.github.com/2018/01/16/java内存模型/</id>
    <published>2018-01-16T09:45:38.000Z</published>
    <updated>2018-01-16T09:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://onm4pqoqp.bkt.clouddn.com/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="java内存模型"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java线程之间的通信采用的是通过共享内存模型-java 内存模型（简称JMM）,<font color="red">JMM决定一个线程对共享变量的写入何时对另一个线程可见</font>。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：<font color="red">线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本</font>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上图可以看出，线程A和线程B进行通信要经历以下两个步骤：<br>（1）线程A把本地内存A中更新过的共享变量刷新到主内存中去。（2）线程B到主内存中去读取线程A之前已更新过的共享变量。<br><img src="http://onm4pqoqp.bkt.clouddn.com/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%A4%BA%E4%BE%8B.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上图所示，本地内存A和B有主内存中共享变量x的副本。设初始时x都为0，线程A把更新后的值x=1临时存放在本地内存中。当线程 A 和线程 B 需要通信时，线程 A 首先会把自己本地内存中修改后的值刷新到主内存中，此时主内存中的 x 也为1了。然后，线程 B 会到主内存中去读取线程 A 更新后的值，此时线程 B 的本地内存也就变为1了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://onm4pqoqp.bkt.clouddn.com/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png&quot; alt=&quot;java内存模型&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;
      
    
    </summary>
    
    
      <category term="java" scheme="http://JiangFeng07.github.com/tags/java/"/>
    
      <category term="并发编程" scheme="http://JiangFeng07.github.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>RNN实现手写数字识别</title>
    <link href="http://JiangFeng07.github.com/2018/01/16/RNN%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://JiangFeng07.github.com/2018/01/16/RNN实现手写数字识别/</id>
    <published>2018-01-16T09:44:25.000Z</published>
    <updated>2018-01-16T09:55:03.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib <span class="keyword">import</span> rnn</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'data/mnist'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time_step_size = <span class="number">28</span></span><br><span class="line">input_size = <span class="number">28</span></span><br><span class="line">hidden_size = <span class="number">256</span></span><br><span class="line">layer_size = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">_X = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line">X = tf.reshape(_X, [<span class="number">-1</span>, time_step_size, input_size])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">batch_size = tf.placeholder(tf.int32, [])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lstm_cell</span><span class="params">()</span>:</span></span><br><span class="line">    lstm_cell = rnn.BasicLSTMCell(num_units=hidden_size, reuse=tf.get_variable_scope().reuse)</span><br><span class="line">    <span class="keyword">return</span> rnn.DropoutWrapper(lstm_cell, output_keep_prob=keep_prob)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mlstm_cell = rnn.MultiRNNCell([lstm_cell() <span class="keyword">for</span> _ <span class="keyword">in</span> range(layer_size)], state_is_tuple=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">init_state = mlstm_cell.zero_state(batch_size, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">outputs, state = tf.nn.dynamic_rnn(mlstm_cell, inputs=X, initial_state=init_state, time_major=<span class="keyword">False</span>)</span><br><span class="line">h_state = outputs[:, <span class="number">-1</span>, :]</span><br><span class="line"></span><br><span class="line">W = tf.Variable(tf.truncated_normal([hidden_size, <span class="number">10</span>], stddev=<span class="number">0.1</span>))</span><br><span class="line">b = tf.Variable(tf.constant(<span class="number">0.1</span>, shape=[<span class="number">10</span>]))</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(h_state, W) + b)</span><br><span class="line"></span><br><span class="line">cross_entropy = -tf.reduce_sum(y * tf.log(prediction))</span><br><span class="line">train_op = tf.train.AdamOptimizer(<span class="number">1e-3</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(prediction, <span class="number">1</span>), tf.argmax(y, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2001</span>):</span><br><span class="line">    xs, ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">        train_accuracy = sess.run(accuracy, feed_dict=&#123;_X: xs, y: ys, keep_prob: <span class="number">1.0</span>, batch_size: <span class="number">100</span>&#125;)</span><br><span class="line">        print(<span class="string">"Iter%d, step %d, training accuracy %g"</span> % (mnist.train.epochs_completed, i, train_accuracy))</span><br><span class="line">    sess.run(train_op, feed_dict=&#123;_X: xs, y: ys, keep_prob: <span class="number">0.5</span>, batch_size: <span class="number">100</span>&#125;)</span><br><span class="line">print(<span class="string">"test accuracy %g"</span> % sess.run(accuracy, feed_dict=&#123;_X: mnist.test.images, y: mnist.test.labels, keep_prob: <span class="number">1.0</span>,batch_size: mnist.test.labels.shape[<span class="number">0</span>]&#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="http://JiangFeng07.github.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>java并发编程-线程三要素</title>
    <link href="http://JiangFeng07.github.com/2018/01/12/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E4%B8%89%E8%A6%81%E7%B4%A0/"/>
    <id>http://JiangFeng07.github.com/2018/01/12/java并发编程-线程三要素/</id>
    <published>2018-01-12T09:46:02.000Z</published>
    <updated>2018-01-16T09:48:31.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>原子性</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原子，一个不可分再被分割的颗粒。原子性，指的是一个或者多个不能再被分割的操作。</p><p>  <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如说：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;<span class="comment">//原子操作</span></span><br><span class="line">i++;<span class="comment">//非原子操作,首先需要从内存读取i到工作内存，进行+1，再把i写入到主内存</span></span><br></pre></td></tr></table></figure><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，虽然读操作和写操作都是原子操作，但是组合在一起就不是了，称这种叫做“复合操作”。那么，在java 中如何保证复合操作的原子性？可以使用synchronized 或 Lock来实现。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//使用synchronized</span><br><span class="line">public synchronized void increase() &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//使用 Lock</span><br><span class="line">private int i = 0;</span><br><span class="line">Lock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">private void increase() &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; finally&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可见性</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可见性指的是，当多线程访问某一个（同一个）变量时，其中一条线程对此变量作出修改，其他线程可以立刻读取到最新修改后的变量。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i = 0;</span><br><span class="line">// 线程 1 执行</span><br><span class="line">i++;</span><br><span class="line">// 线程 2 执行</span><br><span class="line">System.out.print(&quot;i=&quot; + i);</span><br></pre></td></tr></table></figure><p>  以上代码 i的值有两种情况：0或者1。有人会奇怪为什么有0这个答案了？因为线程1可能执行了自加操作，但是可能未及时同步到主内存，导致线程2在从主内存读取数据时，拿到的值依然还是0。</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么，在java<br>  并发编程中，如何保证共享变量的可见性？（1）使用volatile关键字来保证可见性。当一个共享变量被volatile修饰时，它会保证修改的值会<br>  <font color="red">立即被更新到主存</font>，当有其他线程需要读取时，它会去内存中读取新值。而普通的共享普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。（2）可以通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p></li><li><p>有序性</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。<br>  看一下两个例子：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String star=&quot;messi&quot;;//语句1</span><br><span class="line">int age = 29;//语句2</span><br><span class="line">age++;//语句3</span><br></pre></td></tr></table></figure><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这段代码的执行顺序可能并不是1，2，3；由于语句1和语句2完全没有依赖，代码的执行顺序可能2，1，3或者2，3，1，处理器会自动进行排序。但是语句2和语句3是不能调换顺序的，因为它们之间有依赖关系。<br>  <br><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Java里面，可以通过volatile关键字来保证<font color="red">一定的“有序性”</font>。为什么说是一定的“有序性”了？是因为volatile关键字能禁止指令重排序。volatile关键字禁止指令重排序有两层意思：（1）当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；（2）在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//x、y为非volatile变量</span><br><span class="line">//flag为volatile变量</span><br><span class="line"></span><br><span class="line">x = 2;        //语句1</span><br><span class="line">y = 0;        //语句2</span><br><span class="line">flag = true;  //语句3</span><br><span class="line">x = 4;         //语句4</span><br><span class="line">y = -1;       //语句5</span><br></pre></td></tr></table></figure><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4<br>  和语句5的顺序是不作任何保证的。并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。<br>  <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子性&lt;/p&gt;
&lt;p&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;原子，一个不可分再被分割的颗粒。原子性，指的是一个或者多个不能再被分割的操作。&lt;/p&gt;
&lt;p&gt;  &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;n
      
    
    </summary>
    
    
      <category term="java" scheme="http://JiangFeng07.github.com/tags/java/"/>
    
      <category term="并发编程" scheme="http://JiangFeng07.github.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch数据keyword和text的区别</title>
    <link href="http://JiangFeng07.github.com/2017/11/01/ElasticSearch%E6%95%B0%E6%8D%AEkeyword%E5%92%8Ctext%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://JiangFeng07.github.com/2017/11/01/ElasticSearch数据keyword和text的区别/</id>
    <published>2017-11-01T11:19:36.000Z</published>
    <updated>2018-01-16T11:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 ES2.x 版本字符串数据是没有 keyword 和 text 类型的，只有string类型，ES更新到5版本后，取消了 string  数据类型，代替它的是 keyword 和 text 数据类型，那么 keyword 和 text 有什么区别了？<br>Text 数据类型被用来索引长文本，比如说电子邮件的主体部分或者一款产品的介绍。这些文本会被分析，在建立索引前会将这些文本进行分词，转化为词的组合，建立索引。允许 ES来检索这些词语。text 数据类型不能用来排序和聚合。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &apos;localhost:9200/employees/&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;:&#123;</span><br><span class="line">        &quot;employee&quot;:&#123;</span><br><span class="line">             &quot;properties&quot;: &#123;</span><br><span class="line">                 &quot;intro&quot;:&quot;text&quot;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure></p><p>Keyword 数据类型用来建立电子邮箱地址、姓名、邮政编码和标签等数据，不需要进行分词。可以被用来检索过滤、排序和聚合。keyword 类型字段只能用本身来进行检索。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &apos;localhost:9200/employees/&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;:&#123;</span><br><span class="line">        &quot;employee&quot;:&#123;</span><br><span class="line">             &quot;properties&quot;: &#123;</span><br><span class="line">                 &quot;name&quot;:&quot;keyword&quot;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure></p><p>注意，如果不像以上通过mapping 配置索引时，遇到字符串类型时候的字端，系统会默认为“text”类型。检索的时候对字符串进行分析。所以要想只通过字段本身来进行检索，还是需要按照上面把该字段改为“keyword”类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 ES2.x 版本字符串数据是没有 keyword 和 text 类型的，只有string类型，ES更新到5版本后，取消了 string  数据类型，代替它的是 keyword 和 text 数据类型，那么 keyword 和 text 有什么区别了？&lt;br&gt;Text 数
      
    
    </summary>
    
      <category term="ES" scheme="http://JiangFeng07.github.com/categories/ES/"/>
    
    
      <category term="ES" scheme="http://JiangFeng07.github.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch-java api</title>
    <link href="http://JiangFeng07.github.com/2017/11/01/ElasticSearch-java-api/"/>
    <id>http://JiangFeng07.github.com/2017/11/01/ElasticSearch-java-api/</id>
    <published>2017-11-01T11:19:07.000Z</published>
    <updated>2018-01-16T11:24:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章将介绍怎样使用 java 对 ElasticSearch 进行操作。<br>首先需要建立一个 maven 项目，这里不再赘述。<br>1.通过 Maven 添加对 ElasticSearch 依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;transport&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.6.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>2.在 resources 目录下添加log4j2.properties文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appender.console.type = Console</span><br><span class="line">appender.console.name = console</span><br><span class="line">appender.console.layout.type = PatternLayout</span><br><span class="line"></span><br><span class="line">rootLogger.level = info</span><br><span class="line">rootLogger.appenderRef.console.ref = console</span><br></pre></td></tr></table></figure></p><p>3.初始化 ElatsticSearch Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Settings settings = Settings.builder().put(&quot;cluster.name&quot;, &quot;leo&quot;).build();</span><br><span class="line">TransportClient client = new PreBuiltTransportClient(settings). addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(&quot;***.***.***.***&quot;), 9300));</span><br><span class="line">//***.***.***.*** 表示 ip 地址，本地的话，可以使用 localhost，9300是默认的 api 访问接口</span><br></pre></td></tr></table></figure><p>4.创建索引<br>使用 json文件来创建索引，生成 json 文件的方式有多种，字符串格式、利用 Map、利用jackson 序列化 beans 到 json、使用 ElasticSearch helps生成(我使用的方式，其它方式实现可参看<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-docs-index.html#java-docs-index-generate-beans" target="_blank" rel="noopener">官方文档</a>)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IndexResponse response = client.prepareIndex(<span class="string">"books"</span>, <span class="string">"book"</span>, <span class="string">"1"</span>)</span><br><span class="line">                        .setSource(jsonBuilder().</span><br><span class="line">                                startObject()</span><br><span class="line">                                .field(<span class="string">"book_name"</span>, <span class="string">"ElasticSearch入门"</span>)</span><br><span class="line">                                .field(<span class="string">"author"</span>, <span class="string">"张三"</span>)</span><br><span class="line">                                .field(<span class="string">"publish_time"</span>, <span class="string">"207-09-09"</span>)</span><br><span class="line">                               .endObject())</span><br><span class="line">                        .get();</span><br></pre></td></tr></table></figure></p><p>5.获取索引<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetResponse getResponse = client.prepareGet(<span class="string">"books"</span>, <span class="string">"book"</span>, <span class="string">"1"</span>).execute().actionGet();</span><br><span class="line">        System.out.println(getResponse.getSourceAsString());</span><br></pre></td></tr></table></figure></p><p>6.更新索引<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest();</span><br><span class="line">updateRequest.index(<span class="string">"books"</span>);</span><br><span class="line">updateRequest.type(<span class="string">"book"</span>);</span><br><span class="line">updateRequest.id(<span class="string">"1"</span>);</span><br><span class="line">updateRequest.doc(jsonBuilder().startObject().field(<span class="string">"author"</span>, <span class="string">"李四"</span>).endObject());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    client.update(updateRequest).get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后发现作者从“张三”更新为“李四”了。<br>7.删除索引<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeleteResponse response = client.prepareDelete(<span class="string">"books"</span>, <span class="string">"book"</span>, <span class="string">"1"</span>).get();</span><br></pre></td></tr></table></figure></p><p>索引被删除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章将介绍怎样使用 java 对 ElasticSearch 进行操作。&lt;br&gt;首先需要建立一个 maven 项目，这里不再赘述。&lt;br&gt;1.通过 Maven 添加对 ElasticSearch 依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;
      
    
    </summary>
    
      <category term="ES" scheme="http://JiangFeng07.github.com/categories/ES/"/>
    
    
      <category term="ES" scheme="http://JiangFeng07.github.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch文档管理</title>
    <link href="http://JiangFeng07.github.com/2017/10/27/ElasticSearch%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"/>
    <id>http://JiangFeng07.github.com/2017/10/27/ElasticSearch文档管理/</id>
    <published>2017-10-27T11:18:49.000Z</published>
    <updated>2018-01-16T11:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ElasticSearch文档管理-CRUD"><a href="#ElasticSearch文档管理-CRUD" class="headerlink" title="ElasticSearch文档管理(CRUD)"></a>ElasticSearch文档管理(CRUD)</h3><p>本篇文章将介绍使用 REST API 来进行文档的简单创建、更新、读取和删除操作；</p><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://localhost:9200/&lt;index&gt;/&lt;type&gt;/[&lt;id&gt;]&quot;</span><br></pre></td></tr></table></figure><p>其中，索引<index>和类型<type>是必须要进行指定的，id 可选可不选。如果不指定 id，ES 会自动生成一个 id，看下面一个例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;http://localhost:9200/books/book&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;ElasticSearch入门&quot;,</span><br><span class="line">    &quot;author&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;publish_time&quot;:&quot;2017-09-09&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></type></index></p><p>生成结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;AV9SzvYp4qVBg3jRx6Xw&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指定 id 例子如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://localhost:9200/books/book/1&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;ElasticSearch入门&quot;,</span><br><span class="line">    &quot;author&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;publish_time&quot;:&quot;2017-09-09&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>生成结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>由上可以看出，当不指定 id 时，ES 会自动生成一个字符串。</p><h4 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h4><p>使用 HTTP 的 get 方法来进行检索,格式如下:<br>GET<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &quot;http://localhost:9200/&lt;index&gt;/&lt;type&gt;/&lt;id&gt;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;ElasticSearch入门&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;张三&quot;,</span><br><span class="line">        &quot;publish_time&quot;: &quot;2017-09-09&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在只想检索文档的一部分，比如书名(name),可以使用下面代码进行操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &quot;http://localhost:9200/books/book/1?_source=name&quot;</span><br></pre></td></tr></table></figure></p><p>检索结果如下 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;ElasticSearch入门&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者你只想得到 _source字段的数据，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &quot;http://localhost:9200/books/book/1/_source&quot;</span><br></pre></td></tr></table></figure></p><p>生成结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;ElasticSearch入门&quot;,</span><br><span class="line">    &quot;author&quot;:&quot;张三&quot;,</span><br><span class="line">    &quot;publish_time&quot;:&quot;2017-09-09&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>文档在 ES 中是不可变的—不能去修改它们。如果需要更新已经存在的文档，可以重建索引或者替换掉它。在创建文档章节生成了以下文档:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>现在进行更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://localhost:9200/books/book/1&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;ElasticSearch入门&quot;,</span><br><span class="line">    &quot;author&quot;:&quot;李四&quot;,</span><br><span class="line">    &quot;publish_time&quot;:&quot;2017-09-09&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 2,</span><br><span class="line">    &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>把作者从张三改为李四，仔细对比两个生成结果会发现，version 字段从1变为2，result 字段从”created”变为 “updated”。</p><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE  &quot;http://1ocalhost:9200/&lt;index&gt;/&lt;type&gt;/&lt;id&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>进行删除。<br>示例如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://localhost:9200/books/book/1&quot;</span><br></pre></td></tr></table></figure></p><p>执行结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 5,</span><br><span class="line">    &quot;result&quot;: &quot;deleted&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再次执行获取文档命令出现以下结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;books&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;book&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;found&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现 “found”: false 说明删除成功。善意提醒以下，在进行删除一定要谨慎、谨慎、再谨慎…..<br>以上就是 ES 简单的增删改查操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ElasticSearch文档管理-CRUD&quot;&gt;&lt;a href=&quot;#ElasticSearch文档管理-CRUD&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch文档管理(CRUD)&quot;&gt;&lt;/a&gt;ElasticSearch文档管理(C
      
    
    </summary>
    
      <category term="ES" scheme="http://JiangFeng07.github.com/categories/ES/"/>
    
    
      <category term="ES" scheme="http://JiangFeng07.github.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 常用操作</title>
    <link href="http://JiangFeng07.github.com/2017/10/26/ElasticSearch-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://JiangFeng07.github.com/2017/10/26/ElasticSearch-常用操作/</id>
    <published>2017-10-26T11:19:22.000Z</published>
    <updated>2018-01-16T11:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ElasticSearch-基本操作"><a href="#ElasticSearch-基本操作" class="headerlink" title="ElasticSearch 基本操作"></a>ElasticSearch 基本操作</h3><p>本篇博文介绍的是 ElasticSearch-5.6.3基本操作。</p><h4 id="查看集群健康状况"><a href="#查看集群健康状况" class="headerlink" title="查看集群健康状况"></a>查看集群健康状况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_cat/health?v&amp;pretty&apos;</span><br></pre></td></tr></table></figure><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">epoch      timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1509052590 05:16:30  leo     yellow          1         1     26  26    0    0       26             0                  -                 50.0%</span><br></pre></td></tr></table></figure></p><p>status有以下三种状态:</p><ul><li>green,  表示集群一切 ok；</li><li>yellow， 数据可用但是一些分片未分配；</li><li>red，部分数据不可用。这种情况就需要处理了。<h4 id="查看集群所有节点"><a href="#查看集群所有节点" class="headerlink" title="查看集群所有节点"></a>查看集群所有节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_cat/nodes?v&amp;pretty&apos;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host      ip        heap.percent ram.percent load node.role master name</span><br><span class="line">127.0.0.1 127.0.0.1            6          97 3.54 d         *      Turac</span><br></pre></td></tr></table></figure></p><p>可以发现，集群现在只有一个节点，命名为“Turac”。</p><h4 id="查看集群所有索引"><a href="#查看集群所有索引" class="headerlink" title="查看集群所有索引"></a>查看集群所有索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure><p>结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">health status index    pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   myweibo1   5   1          7            0     22.3kb         22.3kb</span><br></pre></td></tr></table></figure></p><p>目前只用一个索引“myweibo1”。</p><h4 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##新键索引</span><br><span class="line">curl -XPUT &apos;localhost:9200/employees&apos;</span><br><span class="line">## 查看索引</span><br><span class="line">curl -XGET &apos;localhost:9200/_cat/indices?v&apos;</span><br><span class="line">##查看_settings</span><br><span class="line">curl -XGET &apos;localhost:9200/employees/_settings&apos;</span><br></pre></td></tr></table></figure><p>新建索引后，执行查看索引语句结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yellow open   employees   5   1          0            0       260b           260b</span><br></pre></td></tr></table></figure></p><p>新增了employees这个索引。<br>查看_settings，结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    &quot;employees&quot;: &#123;</span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;index&quot;: &#123;</span><br><span class="line">                &quot;creation_date&quot;: &quot;1509088075357&quot;,</span><br><span class="line">                &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class="line">                &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;uuid&quot;: &quot;0twhlJ89QuSF1Y1p_Mj7dw&quot;,</span><br><span class="line">                &quot;version&quot;: &#123;</span><br><span class="line">                    &quot;created&quot;: &quot;2040699&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 number_of_shards 的默认值是5，number_of_replicas 的默认值是1，当然建立索引时可以如下进行设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &apos;localhost:9200/employees&apos; -d &apos;&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;index&quot;: &#123;</span><br><span class="line">                &quot;number_of_shards&quot;: &quot;3&quot;,</span><br><span class="line">                &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;&apos;</span><br></pre></td></tr></table></figure></p><p>再次查看_settings,结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;employees&quot;: &#123;</span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;index&quot;: &#123;</span><br><span class="line">                &quot;creation_date&quot;: &quot;1509088734594&quot;,</span><br><span class="line">                &quot;number_of_shards&quot;: &quot;3&quot;,</span><br><span class="line">                &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;uuid&quot;: &quot;xBVUUhm5SwWvoMQoTW8y1w&quot;,</span><br><span class="line">                &quot;version&quot;: &#123;</span><br><span class="line">                    &quot;created&quot;: &quot;2040699&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &apos;localhost:9200/employees/&apos;</span><br></pre></td></tr></table></figure><p>执行查看索引命令，索引“employees ”就没有了。</p><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;http://localhost:9200/&lt;index&gt;/&lt;type&gt;/[&lt;id&gt;]&quot; -d&apos;&#123;JSON&#125;&apos;</span><br></pre></td></tr></table></figure><p>以上是ES 创建文档的一般格式，其中 index 和 type 是必选项，id 可选。<br>指定 id 如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;http://localhost:9200/employees/employee/1&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;Leo&quot;,</span><br><span class="line">    &quot;age&quot;:&quot;27&quot;,</span><br><span class="line">    &quot;tel&quot;:12345678901</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;employees&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;employee&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不指定 id 如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;http://localhost:9200/employees/employee/&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;Ming&quot;,</span><br><span class="line">    &quot;age&quot;:&quot;27&quot;,</span><br><span class="line">    &quot;tel&quot;:12345643901</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;employees&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;employee&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;AV9czyvByznybavM0vVu&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上所示，当不指定id时，系统会自动分配一个 id，本例中 id 为“AV9czyvByznybavM0vVu”</p><h4 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &quot;http://localhost:9200/employees/employee/1&quot;</span><br></pre></td></tr></table></figure><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;employees&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;employee&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;found&quot;: true,</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Leo&quot;,</span><br><span class="line">        &quot;age&quot;: &quot;27&quot;,</span><br><span class="line">        &quot;tel&quot;: 12345678901</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只查看_source字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;http://172.24.38.88:9200/employees/employee/1/_source&apos;</span><br></pre></td></tr></table></figure></p><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;Leo&quot;,</span><br><span class="line">    &quot;age&quot;:&quot;27&quot;,</span><br><span class="line">    &quot;tel&quot;:12345678901</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;http://172.24.38.88:9200/employees/employee/1&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;Leo&quot;,</span><br><span class="line">    &quot;age&quot;:&quot;27&quot;,</span><br><span class="line">    &quot;tel&quot;:23415678901</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;employees&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;employee&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 2,</span><br><span class="line">    &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;created&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于前面在创建文档时已经创建了 id 为1的雇员，所以此时是执行的更新操作，”_version”字段从1变为了2, “result”字段为updated,执行了修改电话号码的操作。如果索引中无 id 为1的雇员，此时会新建一个文档。</p><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &quot;http://172.24.38.88:9200/employees/employee/1&quot;</span><br></pre></td></tr></table></figure><p>文档删除。</p><h4 id="批量创建文档"><a href="#批量创建文档" class="headerlink" title="批量创建文档"></a>批量创建文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &apos;172.24.38.88:9200/employees/employee/_bulk?pretty&amp;pretty&apos;  -d&apos;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;:&quot;28&quot;, &quot;tel&quot;:234567776&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Jane Doe&quot;, &quot;age&quot;:&quot;38&quot;, &quot;tel&quot;:234334764&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure><h4 id="从文件导入数据到索引中"><a href="#从文件导入数据到索引中" class="headerlink" title="从文件导入数据到索引中"></a>从文件导入数据到索引中</h4><p>以官网数据<a href="https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json" target="_blank" rel="noopener">account.json</a>为例。下载问价到 ElasticSearch根目录下，执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application/json&quot; -XPOST &apos;localhost:9200/bank/account/_bulk?pretty&amp;refresh&apos; --data-binary &quot;@accounts.json&quot;</span><br><span class="line">curl &apos;localhost:9200/bank/account/_count&apos;</span><br></pre></td></tr></table></figure></p><p>执行结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;count&quot;: 1000,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 5,</span><br><span class="line">        &quot;successful&quot;: 5,</span><br><span class="line">        &quot;skipped&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>共有1000条数据导入。</p><h4 id="清理索引缓存"><a href="#清理索引缓存" class="headerlink" title="清理索引缓存"></a>清理索引缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;http://localhost:9200/employees/_cache/clear&quot;</span><br></pre></td></tr></table></figure><h4 id="刷新索引数据"><a href="#刷新索引数据" class="headerlink" title="刷新索引数据"></a>刷新索引数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;http://localhost:9200/employees/_refresh&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ElasticSearch-基本操作&quot;&gt;&lt;a href=&quot;#ElasticSearch-基本操作&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch 基本操作&quot;&gt;&lt;/a&gt;ElasticSearch 基本操作&lt;/h3&gt;&lt;p&gt;本篇博文介绍
      
    
    </summary>
    
      <category term="ES" scheme="http://JiangFeng07.github.com/categories/ES/"/>
    
    
      <category term="ES" scheme="http://JiangFeng07.github.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>Kibana安装</title>
    <link href="http://JiangFeng07.github.com/2017/10/25/Kibana%E5%AE%89%E8%A3%85/"/>
    <id>http://JiangFeng07.github.com/2017/10/25/Kibana安装/</id>
    <published>2017-10-25T06:18:07.000Z</published>
    <updated>2018-01-16T11:26:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h3><p>1.下载安装kibana<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.6.3-linux-x86_64.tar.gz</span><br><span class="line">sha1sum kibana-5.6.3-linux-x86_64.tar.gz</span><br><span class="line">tar -xzf kibana-5.6.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p><p>2.执行kibana<br>进入kibana根目录，执行./bin/kibana<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd kibana-5.6.3-linux-x86_64/</span><br><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure></p><p>Kibana 默认端口是5601，本地环境下可以在浏览器输入 localhost:5601进行查看，若出现以下界面，说明安装成功。<br><img src="http://onm4pqoqp.bkt.clouddn.com/kibana.png" alt=""><br>本地环境下可以使用 localhost:5601进行访问，如果使用外机通过 ip +端口的形式访问这台机器，需要修改 Kibana 的配置文件config/kibana.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.host: &quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure></p><p>还有就是打开端口号<br>修改/etc/sysconfig/iptables<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 5601-j ACCEPT</span><br></pre></td></tr></table></figure></p><p>保存即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Kibana-安装&quot;&gt;&lt;a href=&quot;#Kibana-安装&quot; class=&quot;headerlink&quot; title=&quot;Kibana 安装&quot;&gt;&lt;/a&gt;Kibana 安装&lt;/h3&gt;&lt;p&gt;1.下载安装kibana&lt;br&gt;&lt;figure class=&quot;highlight p
      
    
    </summary>
    
      <category term="ES" scheme="http://JiangFeng07.github.com/categories/ES/"/>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch5.x安装</title>
    <link href="http://JiangFeng07.github.com/2017/10/24/ElasticSearch5-x%E5%AE%89%E8%A3%85/"/>
    <id>http://JiangFeng07.github.com/2017/10/24/ElasticSearch5-x安装/</id>
    <published>2017-10-24T10:47:16.000Z</published>
    <updated>2018-01-16T11:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ElasticSearch5-x-安装"><a href="#ElasticSearch5-x-安装" class="headerlink" title="ElasticSearch5.x 安装"></a>ElasticSearch5.x 安装</h3><ol><li>java8，安装 ES5.x 版本必须要有 java 8的环境；</li><li>下载 ElasticSearch5.x，使用以下命令进行下载。可以去<a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">官网</a>进行下载，本篇文章安装的是5.6.3版本；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.tar.gz</span><br><span class="line">tar -xvf elasticsearch-5.6.3.tar.gz</span><br><span class="line">cd elasticsearch-5.6.3/bin</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure></li></ol><p>安装成功后会出现输入在浏览器输入localhost:9200，出现以下信息说明安装成功。<br><img src="http://onm4pqoqp.bkt.clouddn.com/es.png" alt=""></p><p>现在有一个问题，现在在本地环境下可以对 ES 进行访问，但是我们怎样从其它机器来访问它了，修改两个地方:</p><ol><li>修改config/elasticsearch.yml,  network.host修改为0.0.0.0</li><li>修改/etc/sysconfig/iptables,开启9200端口,重启防火墙(service iptables restart)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 9200 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><p>这样，你就可以使用ip-address:9200进行访问了,ip-address指的是你电脑的 ip 地址。</p><h4 id="安装过程遇见问题"><a href="#安装过程遇见问题" class="headerlink" title="安装过程遇见问题"></a>安装过程遇见问题</h4><ol><li><p>max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]<br>root 用户编辑 vim /etc/security/limits.conf 文件, 添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*   hard    nofile  65536</span><br></pre></td></tr></table></figure></li><li><p>max number of threads [1024] for user [henry] is too low, increase to at least [2048]</p></li></ol><p>root 用户编辑 vim /etc/security/limits.d/90-nproc.conf 修改以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*          soft    nproc     2048</span><br></pre></td></tr></table></figure></p><ol><li>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</li></ol><p>root 用户编辑 vim /etc/sysctl.conf 添加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure></p><p>并执行命令 sysctl -p</p><ol><li>system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk<br>henry 用户编辑 vim config/elasticsearch.yml 文件, 添加以下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure></li></ol><p>可能需要重启服务器, 然后重启 ES 服务. 在外部通过浏览器访问 <a href="http://ip-address:9200" target="_blank" rel="noopener">http://ip-address:9200</a>, 如果看到如上图图所示的输出, 那么说明你配置成功啦!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ElasticSearch5-x-安装&quot;&gt;&lt;a href=&quot;#ElasticSearch5-x-安装&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch5.x 安装&quot;&gt;&lt;/a&gt;ElasticSearch5.x 安装&lt;/h3&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="ES" scheme="http://JiangFeng07.github.com/categories/ES/"/>
    
    
      <category term="ES" scheme="http://JiangFeng07.github.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>CNN实现手写数字识别</title>
    <link href="http://JiangFeng07.github.com/2017/10/16/CNN%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://JiangFeng07.github.com/2017/10/16/CNN实现手写数字识别/</id>
    <published>2017-10-16T09:44:31.000Z</published>
    <updated>2018-01-16T09:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'data/mnist'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(tf.constant(<span class="number">0.1</span>, shape=shape))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(X,W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(X, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(X, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME’)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">X_image = tf.reshape(X, [-1, 28, 28, 1])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># first conventional layer</span></span><br><span class="line"><span class="string"># patch_size: 5*5 input channels: 1 output channels:32</span></span><br><span class="line"><span class="string">W_conv1 = weight_variable([5, 5, 1, 32])</span></span><br><span class="line"><span class="string">b_conv1 = bias_variable([32])</span></span><br><span class="line"><span class="string"># first pool layer</span></span><br><span class="line"><span class="string">h_conv1 = tf.nn.relu(conv2d(X_image, W_conv1) + b_conv1)</span></span><br><span class="line"><span class="string">h_pool1 = max_pool_2x2(h_conv1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># second conventional layer</span></span><br><span class="line"><span class="string">W_conv2 = weight_variable([5, 5, 32, 64])</span></span><br><span class="line"><span class="string">b_conv2 = bias_variable([64])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># second pool layer</span></span><br><span class="line"><span class="string">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span></span><br><span class="line"><span class="string">h_pool2 = max_pool_2x2(h_conv2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># densely connected layer</span></span><br><span class="line"><span class="string"># first</span></span><br><span class="line"><span class="string"># image_size:7*7</span></span><br><span class="line"><span class="string">W_fc1 = weight_variable([7*7*64, 1024])</span></span><br><span class="line"><span class="string">b_fc1 = bias_variable([1024])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">h_pool2_flat = tf.reshape(h_pool2, [-1,7*7*64])</span></span><br><span class="line"><span class="string">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">keep_prob = tf.placeholder(tf.float32)</span></span><br><span class="line"><span class="string">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># second</span></span><br><span class="line"><span class="string">W_fc2 = weight_variable([1024, 10])</span></span><br><span class="line"><span class="string">b_fc2 = bias_variable([10])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=y_conv))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)</span></span><br><span class="line"><span class="string">correct_prediction = tf.equal(tf.argmax(y, 1),tf.argmax(y_conv, 1))</span></span><br><span class="line"><span class="string">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sess = tf.InteractiveSession()</span></span><br><span class="line"><span class="string">sess.run(tf.global_variables_initializer())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(1001):</span></span><br><span class="line"><span class="string">    xs, ys= mnist.train.next_batch(64)</span></span><br><span class="line"><span class="string">    if i%100 == 0:</span></span><br><span class="line"><span class="string">        train_accuracy = accuracy.eval(feed_dict=&#123;X: xs, y: ys, keep_prob: 1.0&#125;)</span></span><br><span class="line"><span class="string">        print('</span>step %d, training accuracy %g<span class="string">' % (i, train_accuracy))</span></span><br><span class="line"><span class="string">    train_step.run(feed_dict=&#123;X: xs, y: ys, keep_prob: 0.5&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="http://JiangFeng07.github.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow入门</title>
    <link href="http://JiangFeng07.github.com/2017/10/14/tensorflow%E5%85%A5%E9%97%A8/"/>
    <id>http://JiangFeng07.github.com/2017/10/14/tensorflow入门/</id>
    <published>2017-10-14T09:44:45.000Z</published>
    <updated>2018-01-16T09:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'data/mnist'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">W = tf.Variable(tf.random_normal([<span class="number">784</span>, <span class="number">10</span>],stddev=<span class="number">0.1</span>))</span><br><span class="line">b = tf.Variable(tf.constant(<span class="number">0.1</span>, shape=[<span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line">y = tf.nn.softmax(tf.add(tf.matmul(X, W), b))</span><br><span class="line"></span><br><span class="line">cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    xs, ys = mnist.train.next_batch(<span class="number">64</span>)</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;X: xs, y_: ys&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        print(i,<span class="string">' accuracy is: '</span>, sess.run(accuracy, feed_dict=&#123;X: xs, y_: ys&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sess.run(accuracy, feed_dict=&#123;X: mnist.test.images, y_: mnist.test.labels&#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="http://JiangFeng07.github.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow 安装和卸载</title>
    <link href="http://JiangFeng07.github.com/2017/10/13/tensorflow-%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/"/>
    <id>http://JiangFeng07.github.com/2017/10/13/tensorflow-安装和卸载/</id>
    <published>2017-10-13T09:07:31.000Z</published>
    <updated>2018-01-16T09:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于-virtualenv-安装"><a href="#基于-virtualenv-安装" class="headerlink" title="基于 virtualenv 安装"></a>基于 virtualenv 安装</h2><p>安装步骤如下：</p><ol><li>打开终端（a shell）;</li><li><p>安装 pip（如果之前没有安装的话） 和 virtualenv :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo easy_install pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install --upgrade virtualenv</span></span><br></pre></td></tr></table></figure></li><li><p>建立一个新的 virtualenv 环境 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> virtualenv --system-site-packages ~/tensorflow</span></span><br></pre></td></tr></table></figure></li><li><p>激活 virtualenv :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/tensorflow</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> bin/activate <span class="comment"># 如果使用 bash, sh, ksh, 或者 zsh</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> bin/activate.csh <span class="comment"># 如果使用 csh 或者 tcsh</span></span></span><br><span class="line">终端发生变化:</span><br><span class="line"><span class="meta">(tensorflow)$</span><span class="bash"></span></span><br></pre></td></tr></table></figure></li><li><p>安装 tensorflow :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade tensorflow # for python 2.7</span><br><span class="line">pip3 install --upgrade tensorflow # for python 3.n</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(tensorflow) $ bin python</span><br><span class="line">Python 3.5.2 (default, Jul 28 2016, 21:28:00)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import tensorflow as tf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; hello = tf.constant(<span class="string">'Hello, TensorFlow!'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sess = tf.Session()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(sess.run(hello))</span></span><br><span class="line">b'Hello, TensorFlow!' # 安装成功</span><br></pre></td></tr></table></figure></li></ol><h2 id="tensorflow-卸载"><a href="#tensorflow-卸载" class="headerlink" title="tensorflow 卸载"></a>tensorflow 卸载</h2><ol><li>执行卸载很简单，直接删除目录即可：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r ~/tensorflow</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于-virtualenv-安装&quot;&gt;&lt;a href=&quot;#基于-virtualenv-安装&quot; class=&quot;headerlink&quot; title=&quot;基于 virtualenv 安装&quot;&gt;&lt;/a&gt;基于 virtualenv 安装&lt;/h2&gt;&lt;p&gt;安装步骤如下：&lt;/p&gt;
&lt;o
      
    
    </summary>
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://JiangFeng07.github.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="http://JiangFeng07.github.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>神经网络基础-逻辑回归</title>
    <link href="http://JiangFeng07.github.com/2017/09/26/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://JiangFeng07.github.com/2017/09/26/神经网络基础-逻辑回归/</id>
    <published>2017-09-26T08:50:13.000Z</published>
    <updated>2017-09-26T08:50:13.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git项目创建流程</title>
    <link href="http://JiangFeng07.github.com/2017/08/21/git%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <id>http://JiangFeng07.github.com/2017/08/21/git项目创建流程/</id>
    <published>2017-08-21T08:51:47.000Z</published>
    <updated>2017-08-21T09:04:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;每次新建一个 Git 项目时，都会花费点时间去搜一下教程，为什么？因为忘记了，也可能是自己有点笨，嘻嘻，所以还是记一下这个流程吧。</p><ol><li>在本地新建一个 maven 项目，这里就叫 example ，同时在 Github 创建一个项目也叫 example （地址是：git@github.com:[你的用户名]/example.git）；</li><li>进入本地 example 目录下，以此执行下面命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m 'first commit'</span><br><span class="line">git remote add origin git@github.com:[你的用户名]/example.git</span><br><span class="line">git pull --rebase origin master(这部很重要，不执行这个可能会报错error: failed to push some refs to 'git@github.com:[你的用户名]/example.git')</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><p>经过以上操作，Git项目就建好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;每次新建一个 Git 项目时，都会花费点时间去搜一下教程，为什么？因为忘记了，也可能是自己有点笨，嘻嘻，所以还是记一下这个流程吧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在本地新建一个 maven 项目，这里就叫 example ，同时在 Github 创建一个
      
    
    </summary>
    
      <category term="工具" scheme="http://JiangFeng07.github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://JiangFeng07.github.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic 爬虫实战</title>
    <link href="http://JiangFeng07.github.com/2017/08/10/WebMagic-%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    <id>http://JiangFeng07.github.com/2017/08/10/WebMagic-爬虫实战/</id>
    <published>2017-08-10T09:45:14.000Z</published>
    <updated>2018-01-16T11:41:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webmagic-爬虫实战"><a href="#webmagic-爬虫实战" class="headerlink" title="webmagic 爬虫实战"></a>webmagic 爬虫实战</h3><p>&emsp;&emsp;最近接触到了一个 java 爬虫框架-<a href="http://webmagic.io/docs/zh/" target="_blank" rel="noopener">WebMagic</a>，用起来特别方便，这里就记录一下运用过程。</p><ul><li>使用 Maven</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;us.codecraft&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;webmagic-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.7.3&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;us.codecraft&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;webmagic-extension&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.7.3&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;由于本地已经定制了slf4j的实现，所以去掉了WebMagic中的slf4j依赖。</p><ul><li>实现PageProcessor</li></ul><p>&emsp;&emsp;抓取csdn 博客中某位大牛的文章列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.leo.spider.processor;</span><br><span class="line"></span><br><span class="line">import us.codecraft.webmagic.Page;</span><br><span class="line">import us.codecraft.webmagic.Site;</span><br><span class="line">import us.codecraft.webmagic.Spider;</span><br><span class="line">import us.codecraft.webmagic.pipeline.FilePipeline;</span><br><span class="line">import us.codecraft.webmagic.processor.PageProcessor;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by lionel on 17/11/29.</span><br><span class="line"> */</span><br><span class="line">public class CSDNPageProcessor implements PageProcessor &#123;</span><br><span class="line">    private static final String URL_LIST = &quot;http://blog\\.csdn\\.net/\\w+/article/list/\\d+&quot;;</span><br><span class="line">    private static final String URL_POST = &quot;http://blog\\.csdn\\.net/\\w+/article/details/\\d+&quot;;</span><br><span class="line"></span><br><span class="line">    private Site site = Site</span><br><span class="line">            .me()</span><br><span class="line">            .setDomain(&quot;blog.sina.com.cn&quot;)</span><br><span class="line">            .setSleepTime(3000)</span><br><span class="line">            .setUserAgent(</span><br><span class="line">                    &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.65 Safari/537.31&quot;);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void process(Page page) &#123;</span><br><span class="line">        if (page.getUrl().regex(URL_LIST).match()) &#123;</span><br><span class="line">            List&lt;String&gt; urlPostList = page.getHtml().xpath(&quot;//div[@id=&apos;article_list&apos;]&quot;).links().regex(URL_POST).all();</span><br><span class="line">            page.addTargetRequests(urlPostList);</span><br><span class="line">            List&lt;String&gt; urlList = page.getHtml().links().regex(URL_LIST).all();</span><br><span class="line">            page.addTargetRequests(urlList);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String baseUrl = &quot;http://blog.csdn.net/&quot;;</span><br><span class="line">            page.putField(&quot;title&quot;, baseUrl + page.getHtml().xpath(&quot;//div[@id=\&quot;article_details\&quot;]//a/@href&quot;).toString());</span><br><span class="line">            page.putField(&quot;url&quot;, page.getHtml().xpath(&quot;//div[@id=\&quot;article_details\&quot;]//a/text()&quot;).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Site getSite() &#123;</span><br><span class="line">        return site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        if (args.length == 0) &#123;</span><br><span class="line">            System.out.println(&quot;输入参数不够&quot;);</span><br><span class="line">            System.exit(0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String cmd = args[0];</span><br><span class="line">        String url = String.format(&quot;http://blog.csdn.net/%s/article/list/1&quot;, cmd);</span><br><span class="line">        Spider.create(new CSDNPageProcessor()).addUrl(url).addPipeline(new FilePipeline()).thread(5).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webmagic-爬虫实战&quot;&gt;&lt;a href=&quot;#webmagic-爬虫实战&quot; class=&quot;headerlink&quot; title=&quot;webmagic 爬虫实战&quot;&gt;&lt;/a&gt;webmagic 爬虫实战&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近接触到了一个 java 
      
    
    </summary>
    
      <category term="爬虫" scheme="http://JiangFeng07.github.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://JiangFeng07.github.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之 KD 树</title>
    <link href="http://JiangFeng07.github.com/2017/07/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B-KD-%E6%A0%91/"/>
    <id>http://JiangFeng07.github.com/2017/07/02/数据结构之-KD-树/</id>
    <published>2017-07-02T06:06:59.000Z</published>
    <updated>2017-07-02T10:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近又把机器学习中最近邻算法看了下，为了能够让算法更有效率，提到了用 KD 树来存储数据信息，所以就学习了 kd 树。</p><p>&emsp;&emsp; kd 树（K-dimensional tree）是一种对k维空间的实例点进行存储以便对其进行快速检索的属性数据结构。kd 树是二叉树，表示对 k 维空间的一个划分。构造 kd 树相当于不断地用垂直于坐标轴的超平面将 k 维空间切分，构造一系列的 k 维超矩形区域。很适合应用于高纬度数据的搜索中，比如范围搜索和最近邻搜索。<br><img src="http://onm4pqoqp.bkt.clouddn.com/3.png" alt=""><br>&emsp;&emsp;上图是一个3维的 kd 树。第一次切分是以红色的垂直平面白色长方体分为二份，再对每个子空间用绿色水平平面分为四份，最后使用蓝色垂直平面分为8份。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="kd-树构建"><a href="#kd-树构建" class="headerlink" title="kd 树构建"></a>kd 树构建</h3><p>&emsp;&emsp;对于构造一个 kd 树我们首先需要确定怎样划分左子树和右子树，即一个K维数据是依据什么被划分到左子树或右子树的。<br>&emsp;&emsp;（1）选择哪个维度进行划分？<br>常理说，我们会选择区分度比较大的维度进行划分，区分度怎样度量了？在数学里面，可以使用该维度的方差进行比较，方差越大，这些数据在该维度上的分散度就越大，也就更容易在这个维度上把数据集分开。所以说在选择维度时，可以使用最大方差法。<br>&emsp;&emsp;（2）怎样确保在这一维度上的划分得到的两个子集合的数量尽量相等，即左子树和右子树中的结点个数尽量相等？<br>选好了维度进行切分，要想让左右子树的数量尽可能相等，可以对该维度上数据进行排序，取中位数。</p><p>&emsp;&emsp;解决了以上两个问题，就可以来构造 kd 树了。构造过程如下：<br>&emsp;&emsp;（1） 在K维数据集合中选择具有最大方差的维度k，然后在该维度上选择中值m为pivot对该数据集合进行划分，得到两个子集合；同时创建一个树结点node，用于存储；<br>&emsp;&emsp;（2）对两个子集合重复（1）步骤的过程，直至所有子集合都不能再划分为止；如果某个子集合不能再划分时，则将该子集合中的数据保存到叶子结点（leaf node）。</p><p>&emsp;&emsp;构造过程代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#树节点结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KDTreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, point=None, split=None, left=None, right=None)</span>:</span></span><br><span class="line">        self.point = point</span><br><span class="line">        self.split = split</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="comment">#kd 树构造</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(self, data_file)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(data_file) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    data_list = np.array(data_file)</span><br><span class="line">    m, n = np.shape(data_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方差</span></span><br><span class="line">    max_var = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分区域</span></span><br><span class="line">    split = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">1</span>:</span><br><span class="line">        root = KDTreeNode(data_file[<span class="number">0</span>], split)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="comment">#找方差最大的维度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        array_list = data_list[:, i]</span><br><span class="line">        tmp_var = np.var(array_list).item()</span><br><span class="line">        <span class="keyword">if</span> max_var &lt; tmp_var:</span><br><span class="line">            max_var = tmp_var</span><br><span class="line">            split = i</span><br><span class="line">    data_file.sort(key=<span class="keyword">lambda</span> x: x[split])</span><br><span class="line">    index = int(m / <span class="number">2</span>)</span><br><span class="line">    point = data_file[index]</span><br><span class="line">    root = KDTreeNode(point, split)</span><br><span class="line">    root.left = self.create_tree(data_file[<span class="number">0</span>:index])</span><br><span class="line">    root.right = self.create_tree(data_file[index + <span class="number">1</span>: m])</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在 k 近邻算法中使用 kd 树存储数据集的目的就是能够进行快速搜索，减少距离计算的次数，节约计算成本。所以说搜索 kd 树也是一个很重要的操作。搜索过程如下：<br>&emsp;&emsp;(1)从根节点出发，递归地向下访问 kd 树。若目标点x当前维度的坐标小于切分点的坐标，则移动到左自己点，否则移动到右子节点。直到子节点为叶节点位置。并以此节点为”当前最近节点”。<br>&emsp;&emsp;(2)递归向上回退，进行以下操作：(a) 如果该节点保存的实例点比当前最近点距离目标点更近，则取该点为”当前最近节点”。(b) 当前最近点一定存在于该节点的一个子节点对应的区域。检查该子节点的父节点的另一子节点对应的区域是否有更近的点，具体的，检查另一子节点对应的区域是否与以目标为球心，以目标点与“当前最近点”的距离为半径的超球体相交，如果相交，则可能另外一个子节点对应的区域存在距离目标点更近的点，移动到另一个子节点，接着，递归地进行最近邻搜索；如果不相交，向上回退。<br>&emsp;&emsp;(3)当回退到根节点时，回溯结束，最后的“当前最近点”即为 x 的最近邻点。</p><p>&emsp;&emsp;取维基百科的数据（(2,3), (5,4), (9,6), (4,7), (8,1), (7,2)）为例，找出给定节点 a 的最近邻节点。<br>&emsp;&emsp;首先，构造出的 kd 树如下图所示：<br><img src="http://onm4pqoqp.bkt.clouddn.com/1.png" alt=""><br>&emsp;&emsp;以 a=(2.2，3.2)为例。通过二叉搜索，顺着搜索路径很快就能找到最邻近的近似点，也就是叶子节点（2,3）。但是找到的叶子节点并不一定是最近的,最邻近肯定距离查询点更近，应该位于以查询点为圆心且通过叶子节点的圆域内。先从（7,2）点开始进行二叉查找，然后到达（5,4），最后到达（2,3），此时搜索路径中的节点为小于（7,2）和（5,4），大于（2,3），首先以（2,3）作为当前最近邻点，计算其到查询点（2.1,3.1）的距离为0.28，以点(2.2,3.2)为圆心，0.28为半径画圆，可知圆不会和y=4相交，也不会和 x=7相交，也就是说不会进入节点（5,4）的右子空间以及点（7，2）的右子空间，所以最近点为(2,3);<br>&emsp;&emsp;对应代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, root, x)</span>:</span></span><br><span class="line">    mathUtils = MathUtils()</span><br><span class="line">    node_list = []</span><br><span class="line">    tmp_root = root</span><br><span class="line">    point = root.point</span><br><span class="line">    nearest = root</span><br><span class="line">    <span class="keyword">while</span> tmp_root:</span><br><span class="line">        node_list.append(tmp_root)</span><br><span class="line">        split = tmp_root.split</span><br><span class="line">        point = tmp_root.point</span><br><span class="line">        nearest = tmp_root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x[split] &lt;= tmp_root.point[split]:</span><br><span class="line">            tmp_root = tmp_root.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp_root = tmp_root.right</span><br><span class="line">    min_distance = mathUtils.compute_distance(x, point)</span><br><span class="line">    print(<span class="string">'1'</span>, min_distance)</span><br><span class="line">    <span class="keyword">while</span> node_list:</span><br><span class="line">        back_point = node_list.pop()</span><br><span class="line">        split = back_point.split</span><br><span class="line">        <span class="keyword">if</span> mathUtils.compute_distance(x, back_point.point) &lt; min_distance:</span><br><span class="line">            min_distance = mathUtils.compute_distance(x, back_point.point)</span><br><span class="line">            nearest = back_point</span><br><span class="line">            <span class="keyword">if</span> x[split] &lt;= back_point.point[split]:</span><br><span class="line">                tmp_root = back_point.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp_root = back_point.left</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">if</span> tmp_root:</span><br><span class="line">                node_list.append(tmp_root)</span><br><span class="line">                current_distance = mathUtils.compute_distance(x, tmp_root.point)</span><br><span class="line">                <span class="keyword">if</span> min_distance &gt; current_distance:</span><br><span class="line">                    min_distance = current_distance</span><br><span class="line">                    nearest = tmp_root</span><br><span class="line">                print(<span class="string">"2"</span>, min_distance)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nearest.point, min_distance</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;完整代码可以去我的 <a href="https://github.com/JiangFeng07/feng-python-apply/blob/master/feng-ml-python/src/KDTree.py" target="_blank" rel="noopener">github</a>查看，以上是我对kd 树的理解，如有不得当之处，欢迎指出。</p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ol><li>《统计机器学习》.李航</li><li><a href="https://en.wikipedia.org/wiki/K-d_tree" target="_blank" rel="noopener">维基百科</a></li><li><a href="http://blog.csdn.net/qll125596718/article/details/8426458" target="_blank" rel="noopener">统计学习笔记（3）——k近邻法与kd树</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近又把机器学习中最近邻算法看了下，为了能够让算法更有效率，提到了用 KD 树来存储数据信息，所以就学习了 kd 树。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp; kd 树（K-dimensional tree）是一种对k维空间的实例点进行存储以便对其进
      
    
    </summary>
    
      <category term="数据结构" scheme="http://JiangFeng07.github.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://JiangFeng07.github.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树结构" scheme="http://JiangFeng07.github.com/tags/%E6%A0%91%E7%BB%93%E6%9E%84/"/>
    
      <category term="python" scheme="http://JiangFeng07.github.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习系列之主成分分析（PCA）</title>
    <link href="http://JiangFeng07.github.com/2017/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89/"/>
    <id>http://JiangFeng07.github.com/2017/06/13/机器学习系列之主成分分析（PCA）/</id>
    <published>2017-06-13T13:38:16.000Z</published>
    <updated>2017-06-13T15:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;主成分分析（Principal Component Analysis）,简称 PCA，是机器学习中常用的一种降维方法，其主要思想就是将n维特征映射到k维上(k&lt;=n)，这k维是全新的正交特征。本篇博文介绍了利用 PCA 算法进行特征降维的过程及相关实验代码。</p><p><strong>算法过程如下</strong>：<br><em>输入</em>：样本集 <script type="math/tex">D={x_1,x_2,...,x_m}</script>；<br>&emsp;&emsp;&emsp;低维空间维度 $d^{,}$。<br><em>输出</em>：投影矩阵 <script type="math/tex">W^{*}=(w_1,w_2,...,w_{d^{,}})</script><br><em>过程</em>：<br>1.样本转置<br>2.对所有样本进行中心化：$x<em>i\leftarrow x_i - \frac{1}{m}\sum</em>{i=1}^m x<em>i $；<br>3.计算样本的协方差矩阵$\frac{1}{m}XX^{T}$；<br>4.对协方差矩阵的特征值和特征向量；<br>5.按照特征值从大到小排序，取最大的$d^{,}$个特征值所对应的特征向量$(w_1,w_2,…,w</em>{d^{,}})$;<br>6.转化到新的空间</p><p><strong>案例讲解</strong>：<br>现有数据集D=[[1, 1], [1, 3], [2, 3], [4, 4], [2, 4]]<br>1.样本转置$D^{T}$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># data.T</span><br><span class="line">[[1 1 2 4 2]</span><br><span class="line"> [1 3 3 4 4]]</span><br></pre></td></tr></table></figure></p><p>2.求平均值得:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mean</span><br><span class="line">[2,3]</span><br></pre></td></tr></table></figure></p><p>3.中心化得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># avg=data.T-mean</span><br><span class="line">[[-1. -1.  0.  2.  0.]</span><br><span class="line"> [-2.  0.  0.  1.  1.]]</span><br></pre></td></tr></table></figure></p><p>4.计算协方差矩阵，求得特征值和特征向量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 特征值</span><br><span class="line">[ 2.   0.4]</span><br><span class="line"># 特征向量</span><br><span class="line">[[ 0.70710678 -0.70710678]</span><br><span class="line"> [ 0.70710678  0.70710678]]</span><br></pre></td></tr></table></figure></p><p>5.本例中显然只有两个特征值，我们就选取特征值最大的2和对应的特征向量<script type="math/tex">f_1 = [0.70710678, -0.70710678]</script></p><p>6.转化到新的空间 <script type="math/tex">(f_1)^{T}*avg</script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[-2.12132034 -0.70710678  0.          2.12132034  0.70710678]</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCA</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    data  m*n 矩阵</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        data = data.T</span><br><span class="line">        print(data)</span><br><span class="line">        n, m = np.shape(data)</span><br><span class="line">        <span class="comment"># 矩阵列求平均</span></span><br><span class="line">        mean = np.mean(data, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 中心化</span></span><br><span class="line">        avg = data - mean</span><br><span class="line">        <span class="comment"># 求协方差</span></span><br><span class="line">        cov = (<span class="number">1</span> / m) * avg * avg.T</span><br><span class="line">        <span class="comment"># 求出协方差矩阵的特征值及对应的特征向量</span></span><br><span class="line">        a, b = np.linalg.eig(cov)</span><br><span class="line">        p = b.T</span><br><span class="line">        <span class="keyword">return</span> p[<span class="number">0</span>, :] * avg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    data = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">4</span>]]</span><br><span class="line">    <span class="comment"># 数组转换为矩阵</span></span><br><span class="line">    data = np.mat(data)</span><br><span class="line">    pca = PCA()</span><br><span class="line">    print(pca.fit(data))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;主成分分析（Principal Component Analysis）,简称 PCA，是机器学习中常用的一种降维方法，其主要思想就是将n维特征映射到k维上(k&amp;lt;=n)，这k维是全新的正交特征。本篇博文介绍了利用 PCA 算法进行特征降维的过程及
      
    
    </summary>
    
      <category term="机器学习" scheme="http://JiangFeng07.github.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="降维" scheme="http://JiangFeng07.github.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%99%8D%E7%BB%B4/"/>
    
    
      <category term="机器学习" scheme="http://JiangFeng07.github.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="降维" scheme="http://JiangFeng07.github.com/tags/%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫实战</title>
    <link href="http://JiangFeng07.github.com/2017/06/07/Scrapy%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    <id>http://JiangFeng07.github.com/2017/06/07/Scrapy爬虫实战/</id>
    <published>2017-06-07T10:40:02.000Z</published>
    <updated>2018-01-16T11:41:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近，想好好学习下Scrapy爬虫框架，一种很强大的 python 爬虫框架，在观看了极客学院的课程后，自己实现了用 Scrapy<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">爬虫豆瓣电影 top250</a>，并存于 mysql 数据库中。接下来就开始介绍实现过程。<br>&emsp;&emsp;首先来看看网页结构<br><img src="http://onm4pqoqp.bkt.clouddn.com/2.png" alt=""><br>&emsp;&emsp;对应的html 代码为：<br><img src="http://onm4pqoqp.bkt.clouddn.com/22222.png" alt=""><br>&emsp;&emsp;如上图所示，主要是爬取出电影的名称、电影简要介绍、豆瓣评分、电影概括。</p><p>&emsp;&emsp;环境安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -U scrapy</span><br><span class="line">pip3 install -U pymysql #连接数据库</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;使用 scrapy startproject movie 命令新建一个 scrapy 项目。新建后的项目结构如下图：<br><img src="http://onm4pqoqp.bkt.clouddn.com/scrapy%20%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="" title="scrapy 项目结构.png"></p><p>其中，几个python文件的功能如下，</p><ol><li>Items.py 定义需要抓取并需要后期处理的数据；</li><li>settings.py 文件配置 Scrapy，从而修改 user-agent，设定爬取时间间隔，设置代理，配置各种中间件等等；</li><li>pipeline.py 用于存储后期数据处理的功能，从而使得数据的爬出和处理分开，可以在这个文件中把数据存储到 mysql 数据库；</li><li>MovieSpider.py 自定义爬虫，主要是爬取电影的名称、电影简要介绍、豆瓣评分、电影概括。</li></ol><p><strong>爬取的数据结构定义(Items.py)</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Item, Field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    title = Field()</span><br><span class="line">    movieInfo = Field()</span><br><span class="line">    star = Field()</span><br><span class="line">    quote = Field()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p><strong>爬虫器(MovieSpider.py)</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> movie.items <span class="keyword">import</span> MovieItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'movie'</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250'</span></span><br><span class="line">    start_urls = [<span class="string">'https://movie.douban.com/top250'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = MovieItem()</span><br><span class="line">        selector = Selector(response)</span><br><span class="line">        movies = selector.xpath(<span class="string">'//div[@class="info"]'</span>)</span><br><span class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">            title = movie.xpath(<span class="string">'div[@class="hd"]/a/span/text()'</span>).extract()</span><br><span class="line">            fullTitle = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> title:</span><br><span class="line">                fullTitle += each</span><br><span class="line">            movieInfo = movie.xpath(<span class="string">'div[@class="bd"]/p/text()'</span>).extract()</span><br><span class="line">            star = movie.xpath(<span class="string">'div[@class="bd"]/div[@class="star"]/span[@class="rating_num"]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            quote = movie.xpath(<span class="string">'div[@class="bd"]/p/span/text()'</span>).extract()</span><br><span class="line">            <span class="keyword">if</span> quote:</span><br><span class="line">                quote = quote[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                quote = <span class="string">''</span></span><br><span class="line">            item[<span class="string">'title'</span>] = fullTitle</span><br><span class="line">            item[<span class="string">'movieInfo'</span>] = <span class="string">';'</span>.join(movieInfo).replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            item[<span class="string">'star'</span>] = star[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'quote'</span>] = quote</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        nextPage = selector.xpath(<span class="string">'//span[@class="next"]/link/@href'</span>).extract()</span><br><span class="line">        <span class="keyword">if</span> nextPage:</span><br><span class="line">            nextPage = nextPage[<span class="number">0</span>]</span><br><span class="line">            print(self.url + str(nextPage))</span><br><span class="line">            <span class="keyword">yield</span> Request(self.url + str(nextPage), callback=self.parse)</span><br></pre></td></tr></table></figure></p><p><strong>数据存储到 mysql 数据库</strong><br>首先，要在本地数据库建立 Movie 表，建表语句如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Movie (</span><br><span class="line">  id         INT           NOT NULL PRIMARY KEY AUTO_INCREMENT</span><br><span class="line">  COMMENT <span class="string">'自增 id'</span>,</span><br><span class="line">  name       VARCHAR(<span class="number">1024</span>) NOT NULL</span><br><span class="line">  COMMENT <span class="string">'电影名称'</span>,</span><br><span class="line">  movieInfo  VARCHAR(<span class="number">1024</span>) NOT NULL</span><br><span class="line">  COMMENT <span class="string">'电影详情'</span>,</span><br><span class="line">  star       VARCHAR(<span class="number">16</span>)                        DEFAULT NULL</span><br><span class="line">  COMMENT <span class="string">'豆瓣评分'</span>,</span><br><span class="line">  quote      VARCHAR(<span class="number">1024</span>)                      DEFAULT NULL</span><br><span class="line">  COMMENT <span class="string">'经典台词'</span>,</span><br><span class="line">  createtime DATETIME                           DEFAULT CURRENT_TIMESTAMP</span><br><span class="line">  COMMENT <span class="string">'添加时间'</span></span><br><span class="line">)</span><br><span class="line">  ENGINE = InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;接着，可以对数据库进行连接和存储了。这个过程可在pipeline.py完成，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoviePipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=***, passwd=***, db=***,</span><br><span class="line">                                    charset=<span class="string">'utf8'</span>)</span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        self.cursor.execute(<span class="string">"truncate table Movie"</span>)</span><br><span class="line">        self.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(<span class="string">"insert into Movie (name,movieInfo,star,quote) VALUES (%s,%s,%s,%s)"</span>, (</span><br><span class="line">                item[<span class="string">'title'</span>], item[<span class="string">'movieInfo'</span>], item[<span class="string">'star'</span>], item[<span class="string">'quote'</span>]))</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span> pymysql.Error:</span><br><span class="line">            print(<span class="string">"Error%s,%s,%s,%s"</span> % (item[<span class="string">'title'</span>], item[<span class="string">'movieInfo'</span>], item[<span class="string">'star'</span>], item[<span class="string">'quote'</span>]))</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;到此，爬虫程序就写完了，来看下结果，<br><img src="http://onm4pqoqp.bkt.clouddn.com/%E7%94%B5%E5%BD%B1%E6%95%B0%E7%9B%AE.png" alt="" title="豆瓣电影数目"><br>&emsp;&emsp;有250条数据，和网站电影数目一致，再来看下内容，<br><img src="http://onm4pqoqp.bkt.clouddn.com/%E7%88%AC%E5%8F%96%E7%BB%93%E6%9E%9C.png" alt="" title="豆瓣电影爬取结果"></p><font color="red">注意:在使用 mypysql 连接数据库时，数据库的表字段属性要定义成字符串类型，pymysql 无法插入整形和浮点型到 mysql 表中，这里面有个坑，弄了好久，都没搞定。</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近，想好好学习下Scrapy爬虫框架，一种很强大的 python 爬虫框架，在观看了极客学院的课程后，自己实现了用 Scrapy&lt;a href=&quot;https://movie.douban.com/top250&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="爬虫" scheme="http://JiangFeng07.github.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://JiangFeng07.github.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法系列之K近邻算法</title>
    <link href="http://JiangFeng07.github.com/2017/06/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97%E4%B9%8BK%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    <id>http://JiangFeng07.github.com/2017/06/04/机器学习算法系列之K近邻算法/</id>
    <published>2017-06-04T12:21:04.000Z</published>
    <updated>2017-06-07T16:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;K 近邻算法（KNN）是一种常用的监督学习方法，它的工作机制十分简单：给定测试样本，基于某种距离度量（比较常用的是欧式距离）找出训练集中与其最靠近的 k 个训练样本，然后根据这 k 个邻居的信息来进行预测。它既可以用来进行分类，也可以用来进行回归。通常，在分类任务中会采用投票的方法，即选择这k 个样本中出现最多的类别标记作为预测结果；在回归任务重可使用“平均法”，即将这个 k个样本的实值输出标记的平均值作为预测结果；还可以基于距离远近进行加权平均或加权投票，距离越近的权重越大。本篇博文讲着重介绍使用 k 近邻算法来进行分类。</p><p>&emsp;&emsp;<strong>KNN 算法过程</strong></p><ol><li>计算已知类别数据集中的点到当前节点的距离（欧氏距离等）；</li><li>按照距离递增次序排序；</li><li>选取与当前距离最近的 K 个点；</li><li>统计这 k个点每个类别的出现频率；</li><li>选取出现频率最高的类别作为当前点的预测结果。</li></ol><p>&emsp;&emsp;K近邻算法最简单的实现方法是线性扫描，这时要计算输入实例与每一个训练实例的距离。当训练的数据集特别大时，这种做法特别耗时，不可取。此时，就可以使用的特殊的数据结构来存储训练数据集，以减少计算距离的次数，本篇博文将使用常用的 kd树来存储训练集。<br>&emsp;&emsp;kd 树是一种对k维空间的实例点进行存储以便对其进行快速检索的属性数据结构。kd 树是二叉树，表示对 k 维空间的一个划分。构造 kd 树相当于不断地用垂直于坐标轴的超平面将 k 维空间切分，构造一系列的 k 维超矩形区域。</p><p>&emsp;&emsp;构造 kd 树的方法如下</p><ol><li>构造根节点，使根节点对应于 k 维空间中包含所有实例点的超矩形区域；</li><li>通过</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathUtils</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sigmod</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + math.exp(-x))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sigmoid_derivative</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_distance</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        sum = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">            sum += (a[i] - b[i]) * (a[i] - b[i])</span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> src.MathUtils <span class="keyword">import</span> MathUtils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KDTreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, point=None, split=None, left=None, right=None)</span>:</span></span><br><span class="line">        self.point = point</span><br><span class="line">        self.split = split</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KDTree</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root=None)</span>:</span></span><br><span class="line">        self.root = root</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        构造 kd 树</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_tree</span><span class="params">(self, data_file)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(data_file) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        data_list = np.array(data_file)</span><br><span class="line">        m, n = np.shape(data_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方差</span></span><br><span class="line">        max_var = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 划分区域</span></span><br><span class="line">        split = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">1</span>:</span><br><span class="line">            root = KDTreeNode(data_file[<span class="number">0</span>], split)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            array_list = data_list[:, i]</span><br><span class="line">            tmp_var = np.var(array_list).item()</span><br><span class="line">            <span class="keyword">if</span> max_var &lt; tmp_var:</span><br><span class="line">                max_var = tmp_var</span><br><span class="line">                split = i</span><br><span class="line">        data_file.sort(key=<span class="keyword">lambda</span> x: x[split])</span><br><span class="line">        index = int(m / <span class="number">2</span>)</span><br><span class="line">        point = data_file[index]</span><br><span class="line">        root = KDTreeNode(point, split)</span><br><span class="line">        root.left = self.create_tree(data_file[<span class="number">0</span>:index])</span><br><span class="line">        root.right = self.create_tree(data_file[index + <span class="number">1</span>: m])</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        中序遍历 kd 树</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tree_traverse</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.tree_traverse(root.left)</span><br><span class="line">        print(root.point, root.split)</span><br><span class="line">        self.tree_traverse(root.right)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        搜索 kd 树</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, root, x)</span>:</span></span><br><span class="line">        mathUtils = MathUtils()</span><br><span class="line">        node_list = []</span><br><span class="line">        tmp_root = root</span><br><span class="line">        point = root.point</span><br><span class="line">        nearest = root</span><br><span class="line">        <span class="keyword">while</span> tmp_root:</span><br><span class="line">            node_list.append(tmp_root)</span><br><span class="line">            split = tmp_root.split</span><br><span class="line">            point = tmp_root.point</span><br><span class="line">            nearest = tmp_root</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> x[split] &lt;= tmp_root.point[split]:</span><br><span class="line">                tmp_root = tmp_root.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp_root = tmp_root.right</span><br><span class="line">        min_distance = mathUtils.compute_distance(x, point)</span><br><span class="line">        <span class="keyword">while</span> node_list:</span><br><span class="line">            back_point = node_list.pop()</span><br><span class="line">            split = back_point.split</span><br><span class="line">            <span class="keyword">if</span> mathUtils.compute_distance(x, back_point.point) &lt; min_distance:</span><br><span class="line">                min_distance = mathUtils.compute_distance(x, back_point.point)</span><br><span class="line">                nearest = back_point</span><br><span class="line">                <span class="keyword">if</span> x[split] &lt;= back_point.point[split]:</span><br><span class="line">                    tmp_root = back_point.right</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tmp_root = back_point.left</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">if</span> tmp_root:</span><br><span class="line">                    node_list.append(tmp_root)</span><br><span class="line">                    current_distance = mathUtils.compute_distance(x, tmp_root.point)</span><br><span class="line">                    <span class="keyword">if</span> min_distance &gt; current_distance:</span><br><span class="line">                        min_distance = current_distance</span><br><span class="line">                        nearest = tmp_root</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nearest.point, min_distance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    array = [[<span class="number">7</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">4</span>], [<span class="number">9</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">1</span>]]</span><br><span class="line">    kd_tree = KDTree()</span><br><span class="line">    kd_tree.root = kd_tree.create_tree(array)</span><br><span class="line">    mathUtils = MathUtils()</span><br><span class="line">    x = [<span class="number">2.0</span>, <span class="number">4.5</span>]</span><br><span class="line">    print(kd_tree.query(kd_tree.root, x))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;K 近邻算法（KNN）是一种常用的监督学习方法，它的工作机制十分简单：给定测试样本，基于某种距离度量（比较常用的是欧式距离）找出训练集中与其最靠近的 k 个训练样本，然后根据这 k 个邻居的信息来进行预测。它既可以用来进行分类，也可以用来进行回归。通
      
    
    </summary>
    
      <category term="机器学习" scheme="http://JiangFeng07.github.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="分类" scheme="http://JiangFeng07.github.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="机器学习" scheme="http://JiangFeng07.github.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="分类" scheme="http://JiangFeng07.github.com/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
</feed>
